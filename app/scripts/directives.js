// Generated by CoffeeScript 1.6.3
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

angular.module('resourceFoundryDirectives', []);

angular.module('resourceFoundryDirectives').directive('tag', function() {
  return {
    restrict: 'A',
    replace: true,
    scope: {
      remove: "&",
      tag: "="
    },
    template: "<span class=\"tag label label-info\">\n  <span class=\"name\">{{tag}}</span>\n  <a class=\"delete\" href=\"\" ng-show=\"deletable\" ng-click=\"remove({name: tag})\">x</a>\n</span>",
    link: function(scope, elem, attrs) {
      if (attrs.deletable != null) {
        return scope.deletable = true;
      }
    }
  };
});

angular.module('resourceFoundryDirectives').filter('without', function() {
  return function(input, item) {
    return _.without(input, item);
  };
});

angular.module('resourceFoundryDirectives').directive('tagInput', function() {
  return {
    restrict: 'E',
    scope: {
      tagSuggest: '=tags'
    },
    templateUrl: "views/tag-input.html",
    link: function(scope, elem, attrs) {
      var highlight, highlightNum;
      scope.tagList = [];
      highlightNum = 0;
      (highlight = function() {
        var suggestions;
        suggestions = elem.find('.suggestion');
        if (suggestions.length > 0) {
          if (highlightNum >= suggestions.length) {
            highlightNum = suggestions.length - 1;
          } else if (highlightNum < 0) {
            highlightNum = 0;
          }
          suggestions.removeClass('highlight');
          return suggestions.get(highlightNum).className += ' highlight';
        }
      })();
      scope.$watch('tagInput', highlight);
      elem.find('input').on('keydown', function(e) {
        var _ref;
        if ((_ref = e.keyCode) === 40 || _ref === 38) {
          e.preventDefault();
        }
        switch (e.keyCode) {
          case 40:
            highlightNum++;
            return highlight();
          case 38:
            highlightNum--;
            return highlight();
          case 13:
            return scope.tagInput = elem.find('.suggestion').get(highlightNum).innerText;
        }
      });
      scope.addTag = function() {
        var _ref;
        if (scope.tagInput && (_ref = scope.tagInput, __indexOf.call(scope.tagList, _ref) < 0)) {
          scope.tagList.push(scope.tagInput);
          return scope.tagInput = "";
        }
      };
      return scope.removeTag = function(name) {
        return scope.tagList = _.without(scope.tagList, name);
      };
    }
  };
});
