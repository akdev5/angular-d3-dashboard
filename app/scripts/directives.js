// Generated by CoffeeScript 1.6.3
'use strict';
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

angular.module('resourceFoundryDirectives', ['resourceFoundryServices']);

angular.module('resourceFoundryDirectives').directive('tag', function($timeout) {
  return {
    restrict: 'EA',
    transclude: true,
    scope: {
      key: '@',
      remove: "&"
    },
    template: "<span class=\"tag label label-info\">\n  <span class=\"name\" ng-transclude></span>\n  <a class=\"delete\" href=\"\" ng-show=\"deletable\" ng-click=\"remove({$key: key})\">x</a>\n</span>",
    link: function($s, $e, attrs) {
      if (attrs.deletable != null) {
        $s.deletable = true;
      }
      return $timeout(function() {
        $s.value = $e.find('.name').text();
        return $s.key = attrs.key;
      });
    }
  };
});

angular.module('resourceFoundryDirectives').directive('tagInput', function(keygen) {
  return {
    restrict: 'E',
    scope: {
      tags: '=tags',
      tagList: '=ngModel',
      placeholder: '@'
    },
    templateUrl: "views/tag-input.html",
    link: function($s, $e, attrs) {
      var highlight;
      $s.canCreate = attrs.create != null;
      if ($s.tagList == null) {
        $s.tagList = [];
      }
      $s.hIndex = 0;
      highlight = function(inc) {
        var newHIndex, suggestions;
        newHIndex = $s.hIndex + inc;
        suggestions = $e.find('.suggestion').length;
        if (newHIndex < suggestions && newHIndex >= 0) {
          return $s.hIndex = newHIndex;
        } else if (newHIndex < 0) {
          return $s.hIndex = 0;
        } else {
          return $s.hIndex = suggestions - 1;
        }
      };
      $e.find('input').on('keydown', function(e) {
        var _ref;
        if ((_ref = e.keyCode) === 40 || _ref === 38 || _ref === 13) {
          e.preventDefault();
        } else {
          $s.downKey = false;
        }
        return $s.$apply(function() {
          switch (e.keyCode) {
            case 40:
              highlight(1);
              $s.downKey = true;
              break;
            case 38:
              highlight(-1);
              break;
            case 13:
              highlight(0);
              if ($e.find('.highlight').length > 0) {
                $s.tagInput = $e.find('.highlight').text();
              } else {
                $s.tagInput = $e.find('.suggestion').get($s.hIndex).innerText;
              }
              $s.addTag();
              break;
            default:
              highlight(0);
          }
          if ($s.tagList != null) {
            $s.sCount = 0;
            return $s.suggestions = _.filter($s.tags, function(val, key) {
              if ($s.sCount < 5) {
                if ((key.indexOf($s.tagInput) >= 0 || val.indexOf($s.tagInput) >= 0) && __indexOf.call($s.tagList, key) < 0) {
                  $s.sCount++;
                  return true;
                }
              } else {
                return false;
              }
            });
          } else {
            $s.sCount = 5;
            return $s.suggestions = _.take($s.tags, 5);
          }
        });
      });
      $s.addTag = function() {
        var key, tag;
        tag = $s.tagInput;
        key = keygen(tag);
        if (key && __indexOf.call($s.tagList, key) < 0) {
          if ($s.canCreate || key in $s.tags) {
            $s.tagList.push(key);
            $s.tagInput = "";
            $s.hIndex = 0;
            if (!(key in $s.tags)) {
              return $s.tags[key] = tag;
            }
          }
        }
      };
      return $s.removeTag = function(name) {
        return $s.tagList = _.filter($s.tagList, function(el) {
          return el !== name;
        });
      };
    }
  };
});
